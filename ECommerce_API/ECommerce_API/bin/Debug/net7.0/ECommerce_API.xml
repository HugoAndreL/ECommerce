<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ECommerce_API</name>
    </assembly>
    <members>
        <member name="M:PDV_API.Controllers.AvaliacoesController.PostRating(ECommerce_API.Datas.DTOs.AvaliacaoDTO.CreateAvaliacaoDTO)">
            <summary>
                Cadastra uma nova avaliação
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Title_Rate": "Ótimo produto",
                    "Star_Rate": 5,
                    "Comment_Rate": "Me ajudou muito",
                    "ClienteId": 1,
                    "ProdutoId": 1
                }
                ```
                *Obs: É necessário ter o **cliente** ja criado.*
                
                *Obs: É necessário ter o **produto** ja criado.*
            </remarks>
            <param name="input">Requisição da avaliação. ***Obrigatório**</param>
            <returns>Avaliação que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:PDV_API.Controllers.AvaliacoesController.GetRate(System.Int32,System.Int32)">
            <summary>
                Obtém todas as Avaliações
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <returns>Lista de avaliações</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:PDV_API.Controllers.AvaliacoesController.GetRateById(System.Int32)">
            <summary>
                Obtém uma avaliação de arcodo com seu identificador
            </summary>
            <param name="id">Requisição do identificador da avaliação a ser pesquisado. ***Obrigatório**</param>
            <returns>Avaliação pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:PDV_API.Controllers.ClientesController.PostCliente(ECommerce_API.Datas.DTOs.ClienteDTO.CreateClienteDTO)">
            <summary>
                Cadastra um novo cliente
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Name_Client": "JohnDoe",
                    "Mail_Client": "JohnDoe@mail.com",
                    "Password_Client": "12345"
                }
                ```
            </remarks>
            <param name="input">Requisição do Cliente. ***Obrigatório**</param>
            <returns>Cliente que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:PDV_API.Controllers.ClientesController.GetCliente(System.Int32,System.Int32,System.String)">
            <summary>
                Obtém todos os clientes
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <param name="nameClient">O nome do cliente. *Opcional*</param>
            <returns>Lista de clientes</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:PDV_API.Controllers.ClientesController.GetClienteById(System.Int32)">
            <summary>
                Obtém um cliente de arcodo com seu identificador
            </summary>
            <param name="id">Requisição do identificador do cliente a ser pesquisado. ***Obrigatório**</param>
            <returns>Cliente pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:PDV_API.Controllers.ClientesController.PutCliente(ECommerce_API.Datas.DTOs.ClienteDTO.UpdateClienteDTO,System.Int32)">
            <summary>
                Atualiza (todo) o cliente de acordo com seu identificador
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Name_Client": "John Doe",
                    "Mail_Client": "JohnDoe@email.com",
                    "Password_Client": "123456"
                }
                ```
            </remarks>
            <param name="input">Dados para o cliente. ***Obrigatório**</param>
            <param name="id">Identificador do cliente. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não Encontrado*</response>
        </member>
        <member name="M:PDV_API.Controllers.ClientesController.PatchCliente(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ECommerce_API.Datas.DTOs.ClienteDTO.UpdateClienteDTO})">
            <summary>
                Atualiza (1 valor) do cliente de acordo com seu identificador
            </summary>
            <remarks> 
                Exemplo:
                ```json
                [    
                    {
                        "path": "/Name_Client",
                        "op": "replace",
                        "value": "John Richard"
                    }
                ]
                ```
                *Obs.: É importante colocar os colchetes sobre a array para este comando funcionar.´*
            </remarks>
            <param name="id">Identificador do cliente. ***Obrigatório**</param>
            <param name="input">Dados para atualização do cliente. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:PDV_API.Controllers.ClientesController.DeleteCliente(System.Int32)">
            <summary>
                Apaga o cliente de acordo com identificador
            </summary>
            <param name="id">Identificador do cliente. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.CategoriasController.PostCategoria(ECommerce_API.Datas.DTOs.CategoriaDTO.CreateCategoriaDTO)">
            <summary>
                Cadastra uma nova categoria
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Name_Cat": "Tecnologia",
                    "Desc_Cat": null
                }
                ```
            </remarks>
            <param name="input">Requisição da categoria. ***Obrigatório**</param>
            <returns>Categoria que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.CategoriasController.GetCategoria(System.Int32,System.Int32,System.String)">
            <summary>
                Obtém todas as categorias
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <param name="nameCat">O nome da categoria. *Opcional*</param>
            <returns>Lista de categorias</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.CategoriasController.GetCategoriaById(System.Int32)">
            <summary>
                Obtém uma categoria de arcodo com seu identificador
            </summary>
            <param name="id">Requisição do identificador da categoria a ser pesquisado. ***Obrigatório**</param>
            <returns>Categoria pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.CategoriasController.PutCategoria(ECommerce_API.Datas.DTOs.CategoriaDTO.UpdateCategoriaDTO,System.Int32)">
            <summary>
                Atualiza (toda) a categoria de acordo com seu identificador
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Name_Cat": "Tecnologia",
                    "Desc_Cat": Produtos de tecnologia
                }
                ```
            </remarks>
            <param name="input">Dados para a categoria. ***Obrigatório**</param>
            <param name="id">Identificador da categoria. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não Encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.CategoriasController.PatchCategoria(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ECommerce_API.Datas.DTOs.CategoriaDTO.UpdateCategoriaDTO})">
            <summary>
                Atualiza (1 valor) da Categoria de acordo com seu identificador
            </summary>
            <remarks> 
                Exemplo:
                ```json
                [    
                    {
                        "path": "/Desc_Cat",
                        "op": "replace",
                        "value": "Produtos referentes a tecnologia"
                    }
                ]
                ```
                *Obs.: É importante colocar os colchetes sobre a array para este comando funcionar.´*
            </remarks>
            <param name="id">Identificador da categoria. ***Obrigatório**</param>
            <param name="input">Dados para atualização da categoria. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.CategoriasController.DeleteCategoria(System.Int32)">
            <summary>
                Apaga a categoria de acordo com identificador
            </summary>
            <param name="id">Identificador da categoria. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ComprasController.PostCliente(ECommerce_API.Datas.DTOs.CompraDTO.CreateCompraDTO)">
            <summary>
                Cadastra uma nova compra
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "ClienteId": 1,
                    "HistoricoId": 1,
                    "UsuarioId": 1,
                    "QuantProd_Compra": 1,
                    "Total_Compra": 20.00,
                    "MetPag_Compra": 1
                }
                ```
                *Obs: É necessário ter o **cliente** ja criado.*
                
                *Obs: É necessário ter o **histórico** ja criado.*
                
                *Obs: É necessário ter o **usuário** ja criado.*
            </remarks>
            <param name="input">Requisição da compra. ***Obrigatório**</param>
            <returns>Compra que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ComprasController.GetCliente(System.Int32,System.Int32)">
            <summary>
                Obtém todas as compras
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <returns>Lista de compras</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ComprasController.GetCompraById(System.Int32)">
            <summary>
                Obtém uma compra de arcodo com seu identificador
            </summary>
            <param name="id">Requisição do identificador da compra a ser pesquisado. ***Obrigatório**</param>
            <returns>Compra pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ComprasController.PutCompra(ECommerce_API.Datas.DTOs.ClienteDTO.UpdateClienteDTO,System.Int32)">
            <summary>
                Atualiza (toda) a compra de acordo com seu identificador
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Name_Client": "Teste00",
                    "Mail_Client": "test@email.com",
                    "Password_Client": "123456",
                }
                ```
            </remarks>
            <param name="input">Dados para a compra. ***Obrigatório**</param>
            <param name="id">Identificador da compra. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não Encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ComprasController.PatchCompra(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ECommerce_API.Datas.DTOs.ClienteDTO.UpdateClienteDTO})">
            <summary>
                Atualiza (1 valor) da compra de acordo com seu identificador
            </summary>
            <remarks> 
                Exemplo:
                ```json
                [    
                    {
                        "path": "/Total_Compra",
                        "op": "replace",
                        "value": 50.00
                    }
                ]
                ```
                *Obs.: É importante colocar os colchetes sobre a array para este comando funcionar.´*
            </remarks>
            <param name="id">Identificador da compra. ***Obrigatório**</param>
            <param name="input">Dados para atualização da compra. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ComprasController.DeleteCompra(System.Int32)">
            <summary>
                Apaga a compra de acordo com identificador
            </summary>
            <param name="id">Identificador da compra. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.EnderecosController.PostEndereco(ECommerce_API.Datas.DTOs.EnderecoDTO.CreateEnderecoDTO)">
            <summary>
                Cadastra um novo endereço
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "EstoqueId": 1,
                    "CEP_Endereco": "12345678911234567892",
                    "Desc_Endereco": null
                }
                ```
                *Obs: É necessário ter o **estoque** ja criado.*
            </remarks>
            <param name="input">Requisição do endereço. ***Obrigatório**</param>
            <returns>Endereço que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.EnderecosController.GetEndereco(System.Int32,System.Int32)">
            <summary>
                Obtém todas os Enderecos
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <returns>Lista de endereços</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.EnderecosController.GetEnderecoById(System.Int32)">
            <summary>
                Obtém um endereço de arcodo com seu identificador
            </summary>
            <param name="id">Requisição do identificador do endereço a ser pesquisado. ***Obrigatório**</param>
            <returns>Endereço pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.EstoquesController.PostEstoque(ECommerce_API.Datas.DTOs.EstoqueDTO.CreateEstoqueDTO)">
            <summary>
                Cadastra um novo estoque
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Quant_Estoque": 5
                }
                ```
            </remarks>
            <param name="input">Requisição do estoque. ***Obrigatório**</param>
            <returns>Estoque que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.EstoquesController.GetEstoque(System.Int32,System.Int32)">
            <summary>
                Obtém todos os estoques
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <returns>Lista de estoques</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.EstoquesController.GetEstoqueById(System.Int32)">
            <summary>
                Obtém um estoque de arcodo com seu identificador
            </summary>
            <param name="id">Requisição do identificador do estoque a ser pesquisado. ***Obrigatório**</param>
            <returns>Estoque pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.EstoquesController.PutEstoque(ECommerce_API.Datas.DTOs.EstoqueDTO.UpdateEstoqueDTO,System.Int32)">
            <summary>
                Atualiza (todo) o estoque de acordo com seu identificador
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Quant_Estoque": 10
                }
                ```
            </remarks>
            <param name="input">Dados para o estoque. ***Obrigatório**</param>
            <param name="id">Identificador do estoque. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não Encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.EstoquesController.PatchEstoque(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ECommerce_API.Datas.DTOs.EstoqueDTO.UpdateEstoqueDTO})">
            <summary>
                Atualiza (1 valor) do estoque de acordo com seu identificador
            </summary>
            <remarks> 
                Exemplo:
                ```json
                [
                    {
                        "path": "/Quant_Estoque",
                        "op": "replace",
                        "value": 8
                    }
                ]
                ```
                *Obs.: É importante colocar os colchetes sobre a array para este comando funcionar.´*
            </remarks>
            <param name="id">Identificador do estoque. ***Obrigatório**</param>
            <param name="input">Dados para atualização do estoque. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.EstoquesController.DeleteEstoque(System.Int32)">
            <summary>
                Apaga o estoque de acordo com identificador
            </summary>
            <param name="id">Identificador do estoque. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.FornecedoresController.PostFornecedor(ECommerce_API.Datas.DTOs.FonecedorDTO.CreateFornecedorDTO)">
            <summary>
                Cadastra um novo fornecedor
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Nome_Fornecedor": "John Doe",
                    "Desc_Fornecedor": null,
                    "Contato_Fornecedor": "john.doe@mail",
                    "Social_Fornecedor": null,
                    "EstoqueId": 1
                }
                ```
                *Obs: É necessário ter o **estoque** já criado.*
            </remarks>
            <param name="input">Requisição do fornecedor. ***Obrigatório**</param>
            <returns>Fornecedor que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.FornecedoresController.GetFornecedor(System.Int32,System.Int32,System.String)">
            <summary>
                Obtém todos os fornecedores
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <param name="nameForn">O nome do fornecedor. *Opcional*</param>
            <returns>Lista de fornecedores</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.FornecedoresController.GetFornecedorById(System.Int32)">
            <summary>
                Obtém um fornecedor de arcodo com seu identificador
            </summary>
            <param name="id">Requisição do identificador do fornecedor a ser pesquisado. ***Obrigatório**</param>
            <returns>Fornecedor pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.FornecedoresController.PutFornecedor(ECommerce_API.Datas.DTOs.FonecedorDTO.UpdateFornecedorDTO,System.Int32)">
            <summary>
                Atualiza (todo) o fornecedor de acordo com seu identificador
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Nome_Fornecedor": "John Doe",
                    "Desc_Fornecedor": null,
                    "Contato_Fornecedor": "john.doe@mail.com",
                    "Social_Fornecedor": null,
                }
                ```
            </remarks>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não Encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.FornecedoresController.PatchFornecedor(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ECommerce_API.Datas.DTOs.FonecedorDTO.UpdateFornecedorDTO})">
            <summary>
                Atualiza (1 valor) do fornecedor de acordo com seu identificador
            </summary>
            <remarks> 
                Exemplo:
                ```json
                [    
                    {
                        "path": "/Contato_Fornecedor",
                        "op": "replace",
                        "value": "john.doe@email.com"
                    }
                ]
                ```
                *Obs.: É importante colocar os colchetes sobre a array para este comando funcionar.´*
            </remarks>
            <param name="id">Identificador do fornecedor. ***Obrigatório**</param>
            <param name="input">Dados para atualização do fornecedor. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.FornecedoresController.DeleteFornecedor(System.Int32)">
            <summary>
                Apaga o Fornecedor de acordo com identificador
            </summary>
            <param name="id">Identificador do Fornecedor. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.HistoricosController.PostHistorico(ECommerce_API.Datas.DTOs.HistoricoDTO.CreateHistoricoDTO)">
            <summary>
                Cadastra um novo historico
            </summary>
            <remarks>
            </remarks>
            <param name="input">Requisição do historico. ***Obrigatório**</param>
            <returns>Historico que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.HistoricosController.GetHistorico(System.Int32,System.Int32)">
            <summary>
                Obtém todos os Históricos
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <returns>Lista de históricos</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.HistoricosController.GetHistoricoById(System.Int32)">
            <summary>
                Obtém um Historico de arcodo com seu identificador
            </summary>
            <param name="id">Requisição do identificador da historico a ser pesquisado. ***Obrigatório**</param>
            <returns>Historico pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ImgsProdController.PostImg(ECommerce_API.Datas.DTOs.ImgPDTO.CreateImgPDTO)">
            <summary>
                Cadastra uma nova imagem para o produto
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Name_Img": "ImgEx01",
                    "Src_Img": "Origem da imagem01",
                    "ProdutoId": 1
                }
                ```
                *Obs.: É necessário ter o **produto** já criado.*
            </remarks>
            <param name="input">Requisição da imagem. ***Obrigatório**</param>
            <returns>Imagem que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ImgsProdController.GetImg(System.Int32)">
            <summary>
                Obtém todas as imagens para os produtos
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <returns>Lista de imagems</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ImgsProdController.GetImgById(System.Int32)">
            <summary>
                Obtém uma imagem para o produto de arcodo com seu identificador
            </summary>
            <param name="id">Requisição do identificador da imagem a ser pesquisado. ***Obrigatório**</param>
            <returns>Imagem pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ImgsProdController.PutImg(ECommerce_API.Datas.DTOs.ImgPDTO.UpdateImgPDTO,System.Int32)">
            <summary>
                Atualiza (toda) a imagem para o produto de acordo com seu identificador
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Name_Img": "ImgEx01",
                    "Src_Img": "Origem da imagem01"
                }
                ```
            </remarks>
            <param name="input">Dados para a imagem. ***Obrigatório**</param>
            <param name="id">Identificador da imagem. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não Encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ImgsProdController.PatchImg(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ECommerce_API.Datas.DTOs.ImgPDTO.UpdateImgPDTO})">
            <summary>
                Atualiza (1 valor) da imagem para o produto de acordo com seu identificador
            </summary>
            <remarks> 
                Exemplo:
                ```json
                [    
                    {
                        "path": "/Name_Img",
                        "op": "replace",
                        "value": "ImgEx02"
                    }
                ]
                ```
                *Obs.: É importante colocar os colchetes sobre a array para este comando funcionar.´*
            </remarks>
            <param name="id">Identificador da imagem. ***Obrigatório**</param>
            <param name="input">Dados para atualização da imagem. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ImgsProdController.DeleteImg(System.Int32)">
            <summary>
                Apaga a imagem para o produto de acordo com identificador
            </summary>
            <param name="id">Identificador da imagem. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.HistoricoProdController.PostNN(ECommerce_API.Datas.DTOs.NN_DTO.CreateHistoricoProdDTO)">
            <summary>
                Cadastra uma nova relação N:N histórico e produto
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "HistoricoId": 1,
                    "ProdutoId": 1,
                }
                ```
                *Obs: É necessário ter o **histórico** já criado.*
                
                *Obs: É necessário ter o **produto** já criado.*
            </remarks>
            <param name="input">Requisição da relação N:N histórico e produto. ***Obrigatório**</param>
            <returns>Relação N:N histórico e produto que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.HistoricoProdController.GetNN(System.Int32,System.Int32)">
            <summary>
                Obtém todas as relações N:N histórico e produto
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <returns>Lista de relações N:N histórico e produto</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.HistoricoProdController.GetNNById(System.Int32,System.Int32)">
            <summary>
                Obtém uma relação N:N histórico e produto de arcodo com seu identificador
            </summary>
            <param name="hisId">Requisição do identificador do histórico relação N:N histórico e produto será pesquisado. ***Obrigatório**</param>
            <param name="prodId">Requisição do identificador do produto ao qual a relação N:N histórico e produto será pesquisado. ***Obrigatório**</param>
            <returns>Relação N:N histórico e produto pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ProdCompController.PostNN(ECommerce_API.Datas.DTOs.NN_DTO.CreateProdCompDTO)">
            <summary>
                Cadastra uma nova relação N:N produto e compra
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "ProdutoId": 1,
                    "CompraId": 1
                }
                ```
                *Obs: É necessário ter o **produto** já criado.*
                
                *Obs: É necessário ter a **compra** já criada.*
            </remarks>
            <param name="input">Requisição da relação N:N produto e compra. ***Obrigatório**</param>
            <returns>Relação N:N produto e compra que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ProdCompController.GetNN(System.Int32,System.Int32)">
            <summary>
                Obtém todas as relações N:N produto e compra
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <returns>Lista de relações N:N produto e compra</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ProdCompController.GetProdCompById(System.Int32,System.Int32)">
            <summary>
                Obtém uma relação N:N produto e compra de arcodo com seu identificador
            </summary>
            <param name="prodId">Requisição do identificador do produto ao qual a relação N:N histórico e produto será pesquisado. ***Obrigatório**</param>
            <param name="buyId">Requisição do identificador da compra relação N:N histórico e produto será pesquisado. ***Obrigatório**</param>
            <returns>Relação N:N produto e compra pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ProdutosController.PostProduto(ECommerce_API.Datas.DTOs.ProdutoDTO.CreateProdutoDTO)">
            <summary>
                Cadastra um novo produto
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "CodeBar_Prod": "123456789112",
                    "Name_Prod": "Monitor",
                    "CategoriaId": 1,
                    "Val_Prod": 35.00,
                    "EstoqueId": 1,
                    "FornecedorId": 1
                }
                ```
                *Obs: É necessário ter a **categoria** já criado.*
                
                *Obs: É necessário ter o **estoque** já criado.*
                
                *Obs: É necessário ter o **fornecedor** já criado.*
            </remarks>
            <param name="input">Requisição do produto. ***Obrigatório**</param>
            <returns>Produto que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ProdutosController.GetProduto(System.Int32,System.Int32,System.String)">
            <summary>
                Obtém todos os produtos
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <param name="nameProd">O nome do produto. *Opcional*</param>
            <returns>Lista de produtos</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ProdutosController.GetProdutoById(System.Int32)">
            <summary>
                Obtém um produto de arcodo com seu identificador
            </summary>
            <param name="id">Requisição do identificador do produto a ser pesquisado. ***Obrigatório**</param>
            <returns>Produto pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ProdutosController.PutProduto(ECommerce_API.Datas.DTOs.ProdutoDTO.UpdateProdutoDTO,System.Int32)">
            <summary>
                Atualiza (todo) o produto de acordo com seu identificador
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "CodeBar_Prod": "123456789112",
                    "Name_Prod": "Mouse",
                    "Val_Prod": 25.00
                }
                ```
            </remarks>
            <param name="input">Dados para o produto. ***Obrigatório**</param>
            <param name="id">Identificador do produto. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não Encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ProdutosController.PatchProduto(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ECommerce_API.Datas.DTOs.ProdutoDTO.UpdateProdutoDTO})">
            <summary>
                Atualiza (1 valor) do produto de acordo com seu identificador
            </summary>
            <remarks> 
                Exemplo:
                ```json
                [    
                    {
                        "path": "/Val_Prod",
                        "op": "replace",
                        "value": 20.00
                    }
                ]
                ```
                *Obs.: É importante colocar os colchetes sobre a array para este comando funcionar.´*
            </remarks>
            <param name="id">Identificador do produto. ***Obrigatório**</param>
            <param name="input">Dados para atualização do produto. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.ProdutosController.DeleteProduto(System.Int32)">
            <summary>
                Apaga o produto de acordo com identificador
            </summary>
            <param name="id">Identificador do produto. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.UsuariosController.PostUsuario(ECommerce_API.Datas.DTOs.UsuarioDTO.CreateUsuarioDTO)">
            <summary>
                Cadastra um novo usuario
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Name_User": "Hugo Andre",
                    "CPF_User": "45140050889",
                    "Email_User": "hugo.andre.lucena@email.com",
                    "Password_User": "hugo98"
                }
                ```
            </remarks>
            <param name="input">Requisição do Usuario. ***Obrigatório**</param>
            <returns>Usuario que foi criado</returns>
            <response code="201">**Criado com sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.UsuariosController.GetUsuario(System.Int32,System.Int32,System.String)">
            <summary>
                Obtém todos os usuarios
            </summary>
            <param name="skip">Requisição para dar um numero de paginas. ***Obrigatório**</param>
            <param name="take">Requisição para pegar um numero de dados ao obter. ***Obrigatório.**</param>
            <param name="nameUser">O nome do usuario. *Opcional*</param>
            <returns>Lista de Usuarios</returns>
            <response code="200">**Sucesso**</response>
        </member>
        <member name="M:ECommerce_API.Controllers.UsuariosController.GetUsuarioById(System.Int32)">
            <summary>
                Obtém um usuario de arcodo com seu identificador
            </summary>
            <param name="id">Requisição do identificador do usuario a ser pesquisado. ***Obrigatório**</param>
            <returns>Usuario pesquisado</returns>
            <response code="200">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.UsuariosController.PutUsuario(ECommerce_API.Datas.DTOs.UsuarioDTO.UpdateUsuarioDTO,System.Int32)">
            <summary>
                Atualiza (todo) o usuario de acordo com seu identificador
            </summary>
            <remarks>
                Exemplo:
                ```json
                {
                    "Name_User": "Hugo André",
                    "CPF_User": "45140050889",
                    "Email_User": "hugo.andre.lucena@email.com",
                    "Password_User": "hugo98"
                }
                ```
            </remarks>
            <param name="input">Dados para o usuario. ***Obrigatório**</param>
            <param name="id">Identificador do usuario. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não Encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.UsuariosController.PatchUsuario(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{ECommerce_API.Datas.DTOs.UsuarioDTO.UpdateUsuarioDTO})">
            <summary>
                Atualiza (1 valor) do usuario de acordo com seu identificador
            </summary>
            <remarks> 
                Exemplo:
                ```json
                [    
                    {
                        "path": "/Email_User",
                        "op": "replace",
                        "value": "hugo.andre.lucena@gmail.com"
                    }
                ]
                ```
                *Obs.: É importante colocar os colchetes sobre a array para este comando funcionar.´*
            </remarks>
            <param name="id">Identificador do usuario. ***Obrigatório**</param>
            <param name="input">Dados para atualização do usuario. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="M:ECommerce_API.Controllers.UsuariosController.DeleteUsuario(System.Int32)">
            <summary>
                Apaga o usuario de acordo com identificador
            </summary>
            <param name="id">Identificador do usuario. ***Obrigatório**</param>
            <returns>Nada</returns>
            <response code="204">**Sucesso**</response>
            <response code="404">*Não encontrado*</response>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.AvaliacaoDTO.CreateAvaliacaoDTO">
            <summary>
                Modelo de Adição de Avaliações
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.AvaliacaoDTO.ReadAvaliacaoDTO">
            <summary>
                Modelo de Exibição de Avalições
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.CompraDTO.CreateCompraDTO">
            <summary>
                Modelo de
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.EstoqueDTO.CreateEstoqueDTO">
            <summary>
                Modelo de Adição de Estoque
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.EstoqueDTO.ReadEstoqueDTO">
            <summary>
                Modelo para Exibição de Estoque
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.EstoqueDTO.UpdateEstoqueDTO">
            <summary>
                Modelo para Atualição de Estoque
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.FonecedorDTO.CreateFornecedorDTO">
            <summary>
                Modelo para Adição de Fornecedores
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.FonecedorDTO.ReadFornecedorDTO">
            <summary>
                Modelo de Exibição de Fornecedores
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.FonecedorDTO.UpdateFornecedorDTO">
            <summary>
                Modelo de Atualização de Fornecedores
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.HistoricoDTO.CreateHistoricoDTO">
            <summary>
                Modelo de Criação de Historico
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.HistoricoDTO.ReadHistoricoDTO">
            <summary>
                Modelo de Exibição de Historico
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.ImgPDTO.CreateImgPDTO">
            <summary>
                Modelo de Adição de Imagens
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.ImgPDTO.ReadImgPDTO">
            <summary>
                Modelo de Exibição das Imagens
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.ImgPDTO.UpdateImgPDTO">
            <summary>
                Schema de Atualização de Imagem
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.NN_DTO.CreateHistoricoProdDTO">
            <summary>
                Modelo de Criação da Relação N:N Historicos e Produtos
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.NN_DTO.CreateProdCompDTO">
            <summary>
                Modelo de Criação da Relação N:N Produtos e Compras
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.NN_DTO.ReadHistoricoProdDTO">
            <summary>
                Modelo para Exibição da Relação N:N Historicos e Produtos
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.NN_DTO.ReadProdCompDTO">
            <summary>
                Modelo para Exibição da Relação N:N Produtos e Compras
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.ProdutoDTO.CreateProdutoDTO">
            <summary>
                Modelo de Adiçao de Produtos
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.ProdutoDTO.ReadProdutoDTO">
            <summary>
                Modelo de Exibição de Produtos
            </summary>
        </member>
        <member name="T:ECommerce_API.Datas.DTOs.ProdutoDTO.UpdateProdutoDTO">
            <summary>
                Modelo de Atualização de Produtos das 2 maneiras (PATCH E PUT)
            </summary>
        </member>
        <member name="T:ECommerce_API.Migrations._11092023">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._11092023.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._11092023.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._11092023.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ECommerce_API.Migrations._12092023">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._12092023.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._12092023.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._12092023.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ECommerce_API.Migrations._15092023">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._15092023.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._15092023.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._15092023.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ECommerce_API.Migrations._15092023_2">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._15092023_2.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._15092023_2.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._15092023_2.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ECommerce_API.Migrations._18092023">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._18092023.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._18092023.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._18092023.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ECommerce_API.Migrations._18092023_2">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._18092023_2.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._18092023_2.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._18092023_2.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ECommerce_API.Migrations._19092023">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._19092023.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._19092023.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._19092023.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ECommerce_API.Migrations._19092023_2">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._19092023_2.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._19092023_2.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._19092023_2.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ECommerce_API.Migrations._20092023">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._20092023.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._20092023.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._20092023.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ECommerce_API.Migrations._20092023_2">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._20092023_2.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._20092023_2.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._20092023_2.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ECommerce_API.Migrations._21092023">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._21092023.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._21092023.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ECommerce_API.Migrations._21092023.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ECommerce_API.Models.Avaliacao">
            <summary>
                Modelo base para as Avaliações
            </summary>
        </member>
        <member name="T:ECommerce_API.Models.Estoque">
            <summary>
                Modelo de base para os Estoque
            </summary>
        </member>
        <member name="T:ECommerce_API.Models.Fornecedor">
            <summary>
                Modelo base para os Fornecedores
            </summary>
        </member>
        <member name="T:ECommerce_API.Models.Historico">
            <summary>
                Modelo base para os Históricos
            </summary>
        </member>
        <member name="T:ECommerce_API.Models.ImgProd">
            <summary>
                Modelo base para as Imagens
            </summary>
        </member>
        <member name="T:ECommerce_API.Models.HistoricoProd">
            <summary>
                Modelo base para a entidade N:N de Histórico e Produtos
            </summary>
        </member>
        <member name="T:ECommerce_API.Models.ProdComp">
            <summary>
                Modelo base para a entidade N:N de Produto e Compra
            </summary>
        </member>
        <member name="T:ECommerce_API.Models.Produto">
            <summary>
                Modelo base para os Produtos
            </summary>
        </member>
    </members>
</doc>
